#!/usr/bin/python
# -*- coding: utf-8 -*-
# roychang@synology.com
import atexit
import httplib2
import json
import os
import signal
import sys
import time
import urllib2

INFO_FILE = '/tmp/stock.info'
PID_FILE = '/tmp/stock.pid'
LOG_FILE = '/tmp/stock.log'

def daemonize(pidfile, stdin = '/dev/null',
                       stdout = '/dev/null',
                       stderr = '/dev/null'):
    if os.path.exists(pidfile):
        raise RuntimeError('Already running')

    # First fork
    try:
        if 0 < os.fork():
            raise SystemExit(0) # Parent exit
    except OSError as e:
            raise RuntimeError('fork #1 failed')

    os.chdir('/')
    os.umask(0)
    os.setsid()

    # Second fork
    try:
        if 0 < os.fork():
            raise SystemExit(0)
    except OSError as e:
        raise RuntimeError('fork #2 failed')

    # Clean IO buffers
    sys.stdout.flush()
    sys.stderr.flush()

    # Overwrite stdin, stdout and stderr fd
    with open(stdin, 'rb', 0) as f:
        os.dup2(f.fileno(), sys.stdin.fileno())
    with open(stdout, 'ab', 0) as f:
        os.dup2(f.fileno(), sys.stdout.fileno())
    with open(stderr, 'ab', 0) as f:
        os.dup2(f.fileno(), sys.stderr.fileno())

    # Write pid file
    with open(pidfile, 'w') as f:
        f.write(str(os.getpid()))

    # Remove pid file when exit
    atexit.register(lambda: os.remove(pidfile))

    # Signal handler of termination
    def sigterm_handler(signo, frame):
        raise SystemExit(1)

    signal.signal(signal.SIGTERM, sigterm_handler)

def start(ticket):
    jsInfo = None

    try:
        response = urllib2.urlopen('http://finance.google.com/finance/info?infotype=infoquoteall&client=ig&q=TPE:' + ticket)
        html = response.read()
        jsInfo = json.loads(html[html.find('['):])[0]

    except urllib2.HTTPError:
        print 'Error: the ticket not exists ?'
        raise SystemExit(1)

    with open(INFO_FILE, 'w') as f:
        f.write('CUR_PRICE=' + jsInfo['l_cur'][3:] + '\n')
        f.write('MIN_PRICE=' + jsInfo['lo'] + '\n')
        f.write('MAX_PRICE=' + jsInfo['hi'] + '\n')
        f.write('C=' + jsInfo['c'] + '\n')
        f.write('CP=' + jsInfo['cp'] + '\n')
        f.write('LAST_DAY=' + jsInfo['pcls_fix'] + '\n')

def stop():
    if os.path.exists(PID_FILE):
        try:
            with open(PID_FILE) as f:
                os.kill(int(f.read()), signal.SIGTERM)

            os.remove(INFO_FILE)
        except ValueError as e:
            os.remove(PID_FILE)
            raise SystemExit(1)
        except OSError as e:
            os.remove(PID_FILE)
            raise SystemExit(1)
    else:
        print 'Not running'
        raise SystemExit(1)

def print_usage():
    print 'stock [on ticket] [off]'

def main():
    if 1 >= len(sys.argv):
        print_usage()
        raise SystemExit(1)

    if 'on' == sys.argv[1]:
        if 3 > len(sys.argv):
            print_usage()
            raise SystemExit(1)

        ticket = sys.argv[2]

        try:
            daemonize(PID_FILE, stdout = LOG_FILE, stderr = LOG_FILE)
        except RuntimeError as e:
            print e
            raise SystemExit(1)

        while True:
            start(ticket)
            time.sleep(10)

    elif 'off' == sys.argv[1]:
        stop()
    else:
        print_usage()
        raise SystemExit(1)

if __name__ == '__main__':
    main()
